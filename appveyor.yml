environment:
  global:
    PROJECT_NAME: v_escape
  matrix:
    # Stable channel
    - TARGET: i686-pc-windows-msvc
      CHANNEL: stable
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: stable
    - TARGET: x86_64-pc-windows-msvc
      CHANNEL: stable
    # Nightly channel
    - TARGET: i686-pc-windows-msvc
      CHANNEL: nightly
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: nightly
    - TARGET: x86_64-pc-windows-msvc
      CHANNEL: nightly
    # Stable channel
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: stable
      CARGO_CFG_HTMLESCAPE_DISABLE_AUTO_SIMD:
      CARGO_CFG_LATEXESCAPE_DISABLE_AUTO_SIMD:
    # Nightly channel
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: nightly
      CARGO_CFG_HTMLESCAPE_DISABLE_AUTO_SIMD:
      CARGO_CFG_LATEXESCAPE_DISABLE_AUTO_SIMD:
    # Stable channel
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: stable
      CARGO_CFG_HTMLESCAPE_DISABLE_AUTO_AVX:
      CARGO_CFG_LATEXESCAPE_DISABLE_AUTO_AVX:
    # Nightly channel
    - TARGET: x86_64-pc-windows-gnu
      CHANNEL: nightly
      CARGO_CFG_HTMLESCAPE_DISABLE_AUTO_AVX:
      CARGO_CFG_LATEXESCAPE_DISABLE_AUTO_AVX:

# Install Rust and Cargo
# (Based on from https://github.com/rust-lang/libc/blob/master/appveyor.yml)
install:
  - ps: >-
        If ($Env:TARGET -eq 'x86_64-pc-windows-gnu') {
           $Env:PATH += ';C:\msys64\mingw64\bin'
        } ElseIf ($Env:TARGET -eq 'i686-pc-windows-gnu') {
           $Env:PATH += ';C:\MinGW\bin'
        }
  - curl -sSf -o rustup-init.exe https://win.rustup.rs
  - rustup-init.exe --default-host %TARGET% --default-toolchain %CHANNEL% -y
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V

# 'cargo test' takes care of building for us, so disable Appveyor's build stage.
build: false

# Equivalent to Travis' `script` phase
test_script:
  - cargo clean
  - cargo test
